#lang racket

; 1
(define (sequence spacing low high)
  (if (> low high)
      '()
      (cons low (sequence spacing (+ low spacing) high))))

(sequence 2 3 11)

; 2
(define (string-append-map xs suff)
  (map (lambda (x) (string-append x suff)) xs))

(string-append-map '("1" "2" "3" "4" "5" "6") "lol")

; 3
(define (list-nth-mod xs n)
  (if (negative? n)
      (error "list-nth-mod: negative number")
      (if (null? xs)
          (error "list-nth-mod: negative number")
          (car (list-tail xs (remainder n (length xs)))))))

(list-nth-mod '(1 2 3 4) 2)


(define (fns-helper n)
  (cons (if (= 0 (remainder n 6)) (- n) n) (lambda () (fns-helper (+ n 1)))))
(define (funny-number-stream)
  (fns-helper 0))

((cdr (funny-number-stream)))

(define (stream-for-k-steps s k)
  (if (= k 0)
      '()
      (cons (car s) (stream-for-k-steps ((cdr s)) (- k 1)))))

(stream-for-k-steps (funny-number-stream) 13)